#!/bin/bash

echo "Using worker: `hostname`"

set -e

if [[ $# -ne 1 ]]; then
    echo "Usage: $0 <script>"
    exit 1
fi

if [[ -z "$CI_PROJECT_ID" ]]; then
    echo "CI_PROJECT_ID not defined"
    exit 1
fi

if [[ -z "$CI_RUNNER_ID" ]]; then
    echo "CI_RUNNER_ID not defined"
    exit 1
fi

travis_fold() {
      local action=$1
      local name=$2
      local ANSI_CLEAR="\033[0K"
      echo -en "travis_fold:${action}:${name}\r${ANSI_CLEAR}"
}

fail() {
    echo "$@"
    exit 1
}

wait_for_vm() {
    echo -n "VM: Waiting"
    for i in $(seq 1 60)
    do
        if prlctl exec "$CUR_VM" exit 0
        then
            echo ""
            return 0
        fi
        echo -n "."
        sleep 1s
    done
    return 1
}

pause_vm() {
    prlctl suspend "$CUR_VM" 2>/dev/null || true
}

poweroff_vm() {
    prlctl stop "$CUR_VM" --kill 2>/dev/null || true
}

delete_vm() {
    poweroff_vm
    prlctl delete "$CUR_VM" || true
    exit 0
}

interrupt_vm() {
    exit 1
}

travis_fold start "virtual-machine"
echo "Provisioning Virtual Machine..."
set -x

case "$CI_BUILD_OS" in
osx)
    BASE_VM=Mavericks
    ;;

*)
    fail "$2 is currently not supported"
    ;;
esac

BASE_TEMPLATE="${BASE_VM}_template"
CUR_VM="${BASE_VM}_runner_${CI_RUNNER_ID}"
CUR_SNAPSHOT="started"
CUR_USER="travis"

trap interrupt_vm INT

if ! prlctl status "$CUR_VM" 2>/dev/null 1>/dev/null
then
    if ! prlctl status "$BASE_TEMPLATE" 2>/dev/null 1>/dev/null
    then
        echo "VM: Creating $BASE_TEMPLATE..."
        prlctl clone "$BASE_VM" --name "$BASE_TEMPLATE" --template --linked
    fi

    echo "VM: Bootstraping new $BASE_VM..."
    prlctl create "$CUR_VM" --ostemplate "$BASE_TEMPLATE"
    trap delete_vm EXIT
    prlctl start "$CUR_VM"
    wait_for_vm
    echo "VM: Waiting 20s for machine boot..."
    sleep 20s
    prlctl snapshot "$CUR_VM" --name "$CUR_SNAPSHOT"
    trap poweroff_vm EXIT
else
    SNAPSHOT_ID=$(prlctl snapshot-list "$CUR_VM" | grep " \*" | cut -d '*' -f 2)
    echo "VM: Restoring state of $CUR_VM ($SNAPSHOT_ID)...."
    prlctl snapshot-switch "$CUR_VM" --id "$SNAPSHOT_ID"
    if prlctl status "$CUR_VM" | grep -q "stopped$"
    then
        prlctl start "$CUR_VM"
    fi
    trap poweroff_vm EXIT
    wait_for_vm
fi

get_ip_addr() {
    echo "Renewing IP address..."
    prlctl exec $CUR_VM ipconfig set en0 BOOTP
    prlctl exec $CUR_VM ipconfig set en0 DHCP

    echo "Requesting IP address..."
    for i in $(seq 1 60)
    do
        IP=$(prlctl exec $CUR_VM "ipconfig getifaddr en0" || true)
        [[ -n "$IP" ]] && return 0
        echo "Waiting for IP ($i)..."
        sleep 1s
    done
    return 1
}

wait_for_ssh() {
    for i in $(seq 1 60)
    do
        $SSH_COMMAND $SSH_LOGIN exit 0 && return 0
        echo "Waiting for SSH ($i)..."
        sleep 1s
    done
    return 1
}

IP=""
get_ip_addr
PORT="50111"
SSH_COMMAND="sshpass -p $CUR_USER ssh -p $PORT -o ConnectionAttempts=10 -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
SSH_LOGIN="$CUR_USER@$IP"

if ! which sshpass >/dev/null
then
    echo "Installing sshpass..."
    brew install https://raw.github.com/eugeneoden/homebrew/eca9de1/Library/Formula/sshpass.rb
fi

echo "Waiting for container boot-up: $IP:$PORT..."
wait_for_ssh

echo "Updating date..."
case $CI_BUILD_OS in
    linux|osx)
        $SSH_COMMAND $SSH_LOGIN sudo ntpdate -u time.apple.com
        ;;

    windows)
        $SSH_COMMAND $SSH_LOGIN w32tm /resync
        ;;
esac

set +x
travis_fold end "virtual-machine"

echo "Running build script..."
$SSH_COMMAND $SSH_LOGIN bash --login < "$1"
