#! /bin/bash

### BEGIN INIT INFO
# Provides:          gitlab-ci-runner
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: GitLab CI Runner init.d script
# Description: Enables automatic start of runners at boot time in the background.
### END INIT INFO

APP_ROOT="/home/gitlab_ci_runner/gitlab-ci-runner"
APP_USER="gitlab_ci_runner"
PID_PATH="$APP_ROOT/tmp/pids"
PROCESS_NAME="ruby ./bin/runner"
RUNNER_PID="$PID_PATH/runners.pid"
START_RUNNER="nohup bundle exec ./bin/runner"
NAME="gitlab-ci-runner"
DESC="GitLab CI runner"
RUNNERS_REGISTERED=0
INIT_LOG="/var/log/gitlab_ci_runner.log"

# Read configuration variable file if it is present
test -f /etc/default/gitlab_ci_runner && . /etc/default/gitlab_ci_runner

check_pid() {
  PROCESS_ID=0
  [ -f $RUNNER_PID ] && PROCESS_ID=`cat $RUNNER_PID`
  if [ $PROCESS_ID -ne 0 ]; then
    echo "runner is running with PID = $PROCESS_ID"
  fi
}

execute() {
  sudo -u $APP_USER -H bash -l -c "$1"
}

start() {
  cd $APP_ROOT
  check_pid
  if [ $PROCESS_ID -ne 0 ]; then
    # Program is running, Exit with error code.
    echo "Error! $DESC(s) ($NAME) appear to be running already! Try stopping them first. Exiting."
    exit 1
  else
    if [ `whoami` = root ]; then
      [ ! -f $PID_PATH ] && execute "mkdir -p $PID_PATH"
      [ -f $RUNNER_PID ] && execute "rm -f $RUNNER_PID"

      # Check log file
      if [ ! -f $INIT_LOG ]; then
        touch $INIT_LOG
        chown $APP_USER $INIT_LOG
      fi
      execute "$START_RUNNER  >> $INIT_LOG 2>&1 & echo \$! >> $RUNNER_PID"
      check_pid
    fi
  fi
}

stop() {
 check_pid
 echo -n "Trying to stop registered runner..."

 if [ $PROCESS_ID -gt 0 ]; then
   execute "cat $RUNNER_PID | xargs kill -USR2"
   rm -f $RUNNER_PID
   echo "OK"
 else
   echo "FAILED!"
   echo "Couldn't stop registered runner as there is no record of such in $RUNNER_PID file".
 fi
}

status() {
  echo "Here is what we have at the moment:"
  check_pid
  exit [ $RUNNERS_RUNNING -gt 0 ]
}

## Check to see if we are running as root first.
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root"
    exit 1
fi

case "$1" in
  start)
    start
    ;;
 stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  status)
    status
    ;;
  *)
    echo "Usage: sudo service gitlab_ci_runner {start|stop|restart|status}" >&2
    exit 1
    ;;
esac

exit 0
