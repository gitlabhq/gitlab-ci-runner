#! /bin/bash

# GITLAB CI Runner
# Maintainer: @randx
# Authors: @demisx, @cyclops26, @dukex, @wachiwi

### BEGIN INIT INFO
# Provides:          gitlab-ci-runner
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Enables automatic start of runners at boot time in the background.
# chkconfig: 2345 50 80
# processname: gitlab-ci-runner
### END INIT INFO

###
# DO NOT EDIT THIS FILE!
# This file will be overwritten on update.
# Instead add/change your variables in /etc/default/gitlab_ci_runner
# An example defaults file can be found in lib/support/init.d/gitlab_ci_runner.default.example
###

app_root="/home/gitlab_ci_runner/gitlab-ci-runner"
app_user="gitlab_ci_runner"
pid_path="$app_root/tmp/pids"
process_name="ruby ./bin/runner"
name="gitlab-ci-runner"
desc="GitLab CI runner"

init_log="/var/log/gitlab_ci_runner.log"

runners_registered=0
runners_running=0
start_runner="nohup bundle exec ./bin/runner"
runners_pid="$pid_path/runners.pid"
runners_num=1 # number of runners to spawn

# Read configuration variable file if it is present
test -f /etc/default/gitlab_ci_runner && . /etc/default/gitlab_ci_runner

# Check to see if we are running as root first.
if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root"
  exit 1
fi

# Execute command as app_user
execute() {
  su $app_user -c "$1"
 }

check_pid() {
  # Number of registered runners in PID file
  [ -f $runners_pid ] && runners_registered=`cat $runners_pid | wc -l`

  # Number of active runner processes
  runners_running=`ps -ef | grep "$process_name" | grep -v grep | wc -l`

  echo "Number of registered runners in PID file=$runners_registered"
  echo "Number of running runners=$runners_running"
}

start() {
  cd $app_root
  check_pid
  if [ "$runners_registered" -ne 0 -o "$runners_running" -ne 0 ]; then
    # Program is running, Exit with error code.
    echo "Error! $desc(s) ($name) appear to be running already! Try stopping them first. Exiting."
    exit 1
  else
    if [ `whoami` = root ]; then
      [ ! -f $pid_path ] && execute "mkdir -p $pid_path"
      [ -f $runners_pid ] && execute "rm -f $runners_pid"

      # Spawn runners
      for (( i=1; i<=$runners_num; i++ ))
      do
        # Check log file
        if [ ! -f $init_log ]; then
          touch $init_log
          chown $app_user $init_log
        fi
        echo "Starting runner #$i"
        execute "$start_runner >> $init_log 2>&1 & echo \$! >> $runners_pid"
      done
      echo "SUCCESS: Started $runners_num $desc(s)."
    fi
  fi
}

stop() {
  check_pid
  # Exit if there are no runners
  if [ $runners_registered -eq 0 -a  $runners_running -eq 0 ]; then
    echo "No runners have been found. Exiting."
  else
    # Runners found. Check if there are any ghost runners.
    KILL_GHOSTS=0;
    if [ $runners_registered -ne $runners_running ]; then
      echo "WARNING: Numbers of registered runners don't match number of running runners. Will try to stop them all"
      echo "Registered runners=$runners_registered"
      echo "Running runners=$runners_running"
      KILL_GHOSTS=1;
    fi

    echo -n "Trying to stop registered runners..."
    if [ $runners_registered -gt 0 ]; then
      execute "cat $runners_pid | xargs kill -USR2"
      rm -f $runners_pid
      echo "OK"
    else
      echo "FAILED!"
      echo "Couldn't stop registered runners as there is no record of such in $runners_pid file".
    fi

    if [ $KILL_GHOSTS -eq 1 ]; then
      echo -ne "Trying to kill ghost runners..."
      ps -C "$process_name" -o "%p" h | xargs kill -USR2
      [ $? -eq 0 ] && echo "OK"
    else
      echo "No ghost runners have been found.This is good."
      rm -f $runners_pid
    fi
  fi
}

status() {
  echo "Here is what we have at the moment:"
  check_pid
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  status)
    status
    ;;
  *)
    echo "Usage: sudo service $0 {start|stop|restart|status}" >&2
    exit 1
    ;;
esac

exit 0
